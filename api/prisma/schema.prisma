generator client {
  provider = "prisma-client-2-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Media {
  id        String   @id @default(uuid())
  name      String
  size      Int
  ext       String
  source    String
  createdAt DateTime @default(now()) @db.Timestamp(3)
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now()) @db.Timestamp(3)
}

model Feedback {
  id        String   @id @default(uuid())
  star      Int
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now()) @db.Timestamp(3)
}

model Post {
  id        String     @id @default(uuid())
  title     String
  content   String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  feedbacks Feedback[]
  likes     Like[]
  medias    String[]
  tags      String[]
  status    Status     @default(DRAFT)
  createdAt DateTime   @default(now()) @db.Timestamp(3)
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now()) @db.Timestamp(3)

  @@unique([userId, postId])
}

model User {
  id        String     @id @default(uuid())
  lastname  String
  firstname String
  email     String     @unique
  password  String
  posts     Post[]
  feedbacks Feedback[]
  likes     Like[]
  tags      Tag[]
  createdAt DateTime   @default(now()) @db.Timestamp(3)
}

enum Status {
  DRAFT
  PUBLISH
}
